name: CI/CD Pipeline for Microservices

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout del c칩digo del repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # Configurar Node.js para los servicios
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      # Instalar dependencias para user-service
      - name: Install user-service dependencies
        run: |
          cd user-service
          npm install

      # Instalar dependencias para product-service
      - name: Install product-service dependencies
        run: |
          cd product-service
          npm install

      # Ejecutar pruebas (placeholder, agregar pruebas si existen)
      - name: Run tests
        run: |
          echo "No tests defined yet. Add test scripts to package.json if needed."
          # Ejemplo: npm test en user-service y product-service si se agregan pruebas

      # Configurar Docker Buildx para construir im치genes
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Iniciar sesi칩n en Docker Hub (requiere secretos en el repositorio)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Construir y publicar imagen de user-service
      - name: Build and push user-service image
        uses: docker/build-push-action@v4
        with:
          context: ./user-service
          file: ./user-service/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERH ceramically.com/${{ github.event.repository.owner.login }}/${{ github.event.repository.name }}/user-service:latest

      # Construir y publicar imagen de product-service
      - name: Build and push product-service image
        uses: docker/build-push-action@v4
        with:
          context: ./product-service
          file: ./product-service/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}/product-service:latest

      # Verificar im치genes construidas
      - name: Verify built images
        run: |
          docker images | grep ${{ github.event.repository.name }}
